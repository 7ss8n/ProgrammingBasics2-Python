Завдання №1

Розгляньте наступну функцію, яка дозволяє замінити кожен елемент у списку на квадрат попереднього елементу (перший елемент отримує значення 0). Наприклад, якщо список [1, 2, 3] буде аргументом цієї функції то функція повинна змінити його до вигляду [0, 1, 4].

 

def square_preceding(values):

    """ (list of number) -> NoneType

    Replace each item in the list with square the value of the

    preceding item, and replace the first item with 0.

    >>> L = [1, 2, 3]

    >>> square_preceding(L)

    >>> L

    [0, 1, 4]

    """

    if values != []:

        temp = values[0]

        values[0] = 0

    for i in range(1, len(values)):

        values[i] = temp ** 2

        temp = values[i]

 

a. за допомогою засобів PyCharm для зневадження програм по кроках прослідкуйте виконання виклику цієї функції.

b. ррозробіть множину unittest тестів для перевірки працездатності цієї функції та виправте помилки в реалізації, яка запропонована. Тести повинні бути у модулі test_square_preceding.py, а функцію в модулі square_preceding.py.

с. встановіть модуль coverage для оцінки покриття тестами тексту програми та переконайтеся що тестами покрито 100% коду.
Завдання №2. Парне програмування.
Розробіть модуль flower_test (виклики assert), та модуль test_flower (модульні тести), які будуть відповідати наступному сценарію.
Реалізуйте клас Flower, що має три атрибути: колір, кількість пелюстків та ціну. Ваш клас повинен включати метод ініціалізації, де кожна змінна створюється відповідно до переданого для неї значення, а також методи, що відповідатимуть за те, що атрибуту об’єкта було присвоєно коректне значення.

Від класу Flower успадкуйте класи Tulip, Rose та Chamomile. При потребі реалізуйте у кожному класі додатковий функціонал.

Реалізуйте класи FlowerSet та Bucket так, щоб декілька квіток одного класу можна було об’єднати в набір (множину) квіток FlowerSet, а набори (множини) квіток можна було об’єднати в букет Bucket. У класі Bucket потрібен метод, що буде відповідати за визначення ціни букету.

Обміняйтеся модулями з товаришами та розробіть модуль flower.py, який забезпечить безпомилкове виконання flower_test, та test_flower.

На CMS потрібно розмістити модулі flower_test.py, та test_flower.py, які ви отримали як завдання та модуль flower.py, який ви розробили.

Завдання №2. Парне програмування.
Розробіть модуль department_test (виклики assert), та модуль test_department (модульні тести), які будуть відповідати наступному сценарію.

Реалізуйте клас Department, що має атрибути: назва, керівник, приміщення та працівники. У класі Department повинен бути метод для визначення суми коштів на оплату роботи працівників за один місяць. Клас Department має зв'язок композиції з класом Location, який має атрибути: номер приміщення та назва підрозділу.

Працівники підрозділу це екземпляри класів Salaried_emp та Hourly_emp, які є нащадками класу Employee.  Клас Employee має атрибути: ім'я працівника, адреса, день народження, кваліфікація. Клас Salaried_emp має атрибут заробітна плата, а клас Hourly_emp - кількість відпрацьованих годин та погодинна ставка.  При потребі реалізуйте у кожному класі додатковий функціонал.

Всі класи повинні містити методи ініціалізації, де кожна змінна створюється відповідно до переданого для неї значення, а також методи, що відповідатимуть за те, що атрибуту об’єкта було присвоєно коректне значення.
Обміняйтеся модулями з товаришами та розробіть модуль department.py, який забезпечить безпомилкове виконання department_test, та test_ department.

На CMS потрібно розмістити модулі department_test.py, та test_ department.py, які ви отримали як завдання та модуль department.py, який ви розробили.

Набори модульних тестів, повинні покривати не менше ніж 90% коду
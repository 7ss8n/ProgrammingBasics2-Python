Завдання №3

Для виконання завдання №3необхідно ознайомитися з матеріалами пункту Case study Ch 4 “Python 3 Object-oriented Programming Second Edition” by Dusty Phillips ст. 115-124.

Розробіть сценарій аутентифікації та авторизації користувачів програми Notebook, або гравців у грі «Морський бій». Розробіть також список можливих дозволів для роботи з обраною програмою. Опис потрібно оформити у текстовому файлі account_description.txt в якому обов’язково потрібно вказати в яких випадках і які винятки будуть використовуватися при реалізації.

Розробіть (модифікуйте) модуль auth.py для аутентифікації та авторизації користувачів.

Розробіть модуль auth_account.py, який буде використовувати модуль auth.py і в якому буде реалізовано реєстрацію користувачів, вхід в систему та надання прав користувачеві. Рекомендується спочатку зареєструвати користувача з максимальними правами, а потім тільки цей користувач зможе надавати відповідні дозволи іншим користувачам.

Завдання №4

Розгляньте результати виконання завдання на програмування №4 з попередньої лабораторної роботи (Document, Cursor та Character). Для коректної роботи програми у випадках, які було досліджено у цьому завдання розробіть множину класів винятків та модифікуйте класи  Document, Cursor та Character


Завдання №5
Розробіть множину unittest тестів для методу intersect, який призначений для пошуку точки перетину двох прямих і реалізований в класі Line. Прямі в класі Line представляються парою точок (екземпляри класу Point), через які вони проходять, наприклад [Point(0.0, 0.0), Point(1.0, 3.0)]. Аргументами методу є дві прямі.
Набір тестів повинен містити мінімум шість тестових випадків та враховувати наступні особливості:

a. Якщо прямі не перетинаються то метод intersect повертає None.

b. Якщо прямі перетинаються то метод intersect повертає точку (екземпляр класу Point) перетину, наприклад Point(0.5, 0.75).

c. Якщо прямі збігаються то метод повертає перший аргумент.

Тести потрібно оформити в модулі test_ line.py, а метод intersect в модулі line.py. При розробці тестів зверніть увагу (перечитайте help) по використанню методів setUp та tearDown класу TestCase.

Для розроблення функції для пошуку перетину двох прямих можна скористатися наступними описами (http://ibis.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html#SEC32.2.1,

http://jeffe.cs.illinois.edu/teaching/373/notes/x06-sweepline.pdf ,

http://alienryderflex.com/intersect/).


Завдання №6

Розробіть множину unittest тестів (щонайменше чотири) для функції all_prefixes, яка приймає рядок як аргумент і повертає множину всіх підрядків, які починаються з першої літери. Наприклад, якщо рядок "lead" є аргументом цієї функції то функція поверне множину set {"l", "le", "lea", "lead"} (Зверніть увагу що у рядку перша літера може зустрічатися декілька разів. Наприклад, авангард). Функцію потрібно оформити в модулі all_prefixes.py, а тести в модулі test_prefixes.py


Завдання №7

Розробіть множину unittest тестів (щонайменше п’ять) для функції is_sorted, яка приймає список цілих чисел і повертає True якщо числа впорядковані по зростанню (в списку можуть бути однакові значення), та False в іншому випадку. Функцію потрібно оформити модулі is_sorted.py, а тести в модулі test_sorting.py


Завдання №8

Для виконання завдання №8 необхідно ознайомитися з наступною інформацією (“Python 3 Object-oriented Programming Second Edition” by Dusty Phillips ст. 385-391).

На основі наведеного прикладу застосування керованої тестами розробки програми шифрування тексту шифром Віженера зробіть висновок про переваги й недоліки цієї методології. Адаптуйте множину pytest тестів до unittest тестів. Тести потрібно оформити в модулі test_vigenere_cipher.py, а клас VigenereCipher в модулі vigenere_cipher.py.

 

Домашнє завдання вважається повністю виконаною коли розміщено у cms до завершення граничного терміну наступні її складові (кожне завдання в окремій теці):

    account_description.txt
    auth.py
    auth_account.py
    test_vigenere_cipher.py
    vigenere_cipher.py
    test_line.py
    line.py
    test_prefixes.py
    all_prefixes.py
    test_sorting.py
    is_sorted.py 
    Document.py